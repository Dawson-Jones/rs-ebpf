// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::transmute_ptr_to_ref)]
#[allow(clippy::upper_case_acronyms)]
#[warn(single_use_lifetimes)]
mod imp {
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;

    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("kprobe_bpf")
            .map("my_map", false)
            .map("kprobe_b.rodata", false)
            .prog("bpf_prog1")
            .prog("bpf_prog2");

        builder.build()
    }

    #[derive(Default)]
    pub struct KprobeSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'a> SkelBuilder<'a> for KprobeSkelBuilder {
        type Output = OpenKprobeSkel<'a>;
        fn open(mut self) -> libbpf_rs::Result<OpenKprobeSkel<'a>> {
            let mut skel_config = build_skel_config()?;
            let open_opts = self.obj_builder.opts(std::ptr::null());

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenKprobeSkel { obj, skel_config })
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
        ) -> libbpf_rs::Result<OpenKprobeSkel<'a>> {
            let mut skel_config = build_skel_config()?;

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_config.get(), &open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(skel_config.object_ptr())? };

            Ok(OpenKprobeSkel { obj, skel_config })
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    pub struct OpenKprobeMaps<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenKprobeMaps<'_> {
        pub fn my_map(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("my_map").unwrap()
        }

        pub fn rodata(&self) -> &libbpf_rs::OpenMap {
            self.inner.map("kprobe_b.rodata").unwrap()
        }
    }

    pub struct OpenKprobeMapsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenKprobeMapsMut<'_> {
        pub fn my_map(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("my_map").unwrap()
        }

        pub fn rodata(&mut self) -> &mut libbpf_rs::OpenMap {
            self.inner.map_mut("kprobe_b.rodata").unwrap()
        }
    }

    pub struct OpenKprobeProgs<'a> {
        inner: &'a libbpf_rs::OpenObject,
    }

    impl OpenKprobeProgs<'_> {
        pub fn bpf_prog1(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("bpf_prog1").unwrap()
        }

        pub fn bpf_prog2(&self) -> &libbpf_rs::OpenProgram {
            self.inner.prog("bpf_prog2").unwrap()
        }
    }

    pub struct OpenKprobeProgsMut<'a> {
        inner: &'a mut libbpf_rs::OpenObject,
    }

    impl OpenKprobeProgsMut<'_> {
        pub fn bpf_prog1(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("bpf_prog1").unwrap()
        }

        pub fn bpf_prog2(&mut self) -> &mut libbpf_rs::OpenProgram {
            self.inner.prog_mut("bpf_prog2").unwrap()
        }
    }

    pub mod kprobe_rodata_types {
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct rodata {}
    }

    pub struct OpenKprobeSkel<'a> {
        pub obj: libbpf_rs::OpenObject,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
    }

    impl<'a> OpenSkel for OpenKprobeSkel<'a> {
        type Output = KprobeSkel<'a>;
        fn load(mut self) -> libbpf_rs::Result<KprobeSkel<'a>> {
            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            let obj = unsafe { libbpf_rs::Object::from_ptr(self.obj.take_ptr())? };

            Ok(KprobeSkel {
                obj,
                skel_config: self.skel_config,
                links: KprobeLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            &self.obj
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            &mut self.obj
        }
    }
    impl OpenKprobeSkel<'_> {
        pub fn progs(&self) -> OpenKprobeProgs<'_> {
            OpenKprobeProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> OpenKprobeProgsMut<'_> {
            OpenKprobeProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> OpenKprobeMaps<'_> {
            OpenKprobeMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> OpenKprobeMapsMut<'_> {
            OpenKprobeMapsMut {
                inner: &mut self.obj,
            }
        }
    }

    pub struct KprobeMaps<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl KprobeMaps<'_> {
        pub fn my_map(&self) -> &libbpf_rs::Map {
            self.inner.map("my_map").unwrap()
        }

        pub fn rodata(&self) -> &libbpf_rs::Map {
            self.inner.map("kprobe_b.rodata").unwrap()
        }
    }

    pub struct KprobeMapsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl KprobeMapsMut<'_> {
        pub fn my_map(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("my_map").unwrap()
        }

        pub fn rodata(&mut self) -> &mut libbpf_rs::Map {
            self.inner.map_mut("kprobe_b.rodata").unwrap()
        }
    }

    pub struct KprobeProgs<'a> {
        inner: &'a libbpf_rs::Object,
    }

    impl KprobeProgs<'_> {
        pub fn bpf_prog1(&self) -> &libbpf_rs::Program {
            self.inner.prog("bpf_prog1").unwrap()
        }

        pub fn bpf_prog2(&self) -> &libbpf_rs::Program {
            self.inner.prog("bpf_prog2").unwrap()
        }
    }

    pub struct KprobeProgsMut<'a> {
        inner: &'a mut libbpf_rs::Object,
    }

    impl KprobeProgsMut<'_> {
        pub fn bpf_prog1(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("bpf_prog1").unwrap()
        }

        pub fn bpf_prog2(&mut self) -> &mut libbpf_rs::Program {
            self.inner.prog_mut("bpf_prog2").unwrap()
        }
    }

    #[derive(Default)]
    pub struct KprobeLinks {
        pub bpf_prog1: Option<libbpf_rs::Link>,
        pub bpf_prog2: Option<libbpf_rs::Link>,
    }

    pub struct KprobeSkel<'a> {
        pub obj: libbpf_rs::Object,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'a>,
        pub links: KprobeLinks,
    }

    unsafe impl Send for KprobeSkel<'_> {}
    unsafe impl Sync for KprobeSkel<'_> {}

    impl Skel for KprobeSkel<'_> {
        fn object(&self) -> &libbpf_rs::Object {
            &self.obj
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            &mut self.obj
        }

        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(self.skel_config.get()) };
            if ret != 0 {
                return Err(libbpf_rs::Error::System(-ret));
            }

            self.links = KprobeLinks {
                bpf_prog1: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
                bpf_prog2: (|| {
                    Ok(core::ptr::NonNull::new(self.skel_config.prog_link_ptr(1)?)
                        .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }))
                })()?,
            };

            Ok(())
        }
    }
    impl KprobeSkel<'_> {
        pub fn progs(&self) -> KprobeProgs<'_> {
            KprobeProgs { inner: &self.obj }
        }

        pub fn progs_mut(&mut self) -> KprobeProgsMut<'_> {
            KprobeProgsMut {
                inner: &mut self.obj,
            }
        }

        pub fn maps(&self) -> KprobeMaps<'_> {
            KprobeMaps { inner: &self.obj }
        }

        pub fn maps_mut(&mut self) -> KprobeMapsMut<'_> {
            KprobeMapsMut {
                inner: &mut self.obj,
            }
        }
    }

    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 13, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97,
        98, 0, 107, 112, 114, 111, 98, 101, 47, 107, 109, 101, 109, 95, 99, 97, 99, 104, 101, 95,
        102, 114, 101, 101, 0, 107, 114, 101, 116, 112, 114, 111, 98, 101, 47, 107, 109, 101, 109,
        95, 99, 97, 99, 104, 101, 95, 97, 108, 108, 111, 99, 95, 110, 111, 100, 101, 0, 46, 114,
        111, 100, 97, 116, 97, 0, 46, 109, 97, 112, 115, 0, 108, 105, 99, 101, 110, 115, 101, 0,
        118, 101, 114, 115, 105, 111, 110, 0, 107, 112, 114, 111, 98, 101, 46, 98, 112, 102, 46,
        99, 0, 98, 112, 102, 95, 112, 114, 111, 103, 49, 46, 95, 95, 95, 95, 102, 109, 116, 0, 98,
        112, 102, 95, 112, 114, 111, 103, 49, 0, 109, 121, 95, 109, 97, 112, 0, 98, 112, 102, 95,
        112, 114, 111, 103, 50, 0, 95, 108, 105, 99, 101, 110, 115, 101, 0, 95, 118, 101, 114, 115,
        105, 111, 110, 0, 46, 114, 101, 108, 107, 112, 114, 111, 98, 101, 47, 107, 109, 101, 109,
        95, 99, 97, 99, 104, 101, 95, 102, 114, 101, 101, 0, 46, 114, 101, 108, 107, 114, 101, 116,
        112, 114, 111, 98, 101, 47, 107, 109, 101, 109, 95, 99, 97, 99, 104, 101, 95, 97, 108, 108,
        111, 99, 95, 110, 111, 100, 101, 0, 46, 66, 84, 70, 0, 46, 66, 84, 70, 46, 101, 120, 116,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0,
        4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 115, 0, 0, 0, 1, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 3, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0,
        0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0, 0, 17, 0, 6,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 18, 0, 4, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 17, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,
        0, 0, 0, 0, 0, 0, 0, 169, 0, 0, 0, 17, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0,
        0, 0, 191, 22, 0, 0, 0, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 2,
        0, 0, 8, 0, 0, 0, 133, 0, 0, 0, 6, 0, 0, 0, 121, 97, 104, 0, 0, 0, 0, 0, 123, 26, 248, 255,
        0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 248, 255, 255, 255, 24, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 3, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0,
        0, 0, 0, 0, 0, 0, 121, 18, 80, 0, 0, 0, 0, 0, 123, 42, 248, 255, 0, 0, 0, 0, 183, 2, 0, 0,
        0, 0, 0, 0, 123, 42, 240, 255, 0, 0, 0, 0, 121, 19, 32, 0, 0, 0, 0, 0, 7, 3, 0, 0, 8, 0, 0,
        0, 191, 161, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 240, 255, 255, 255, 183, 2, 0, 0, 8, 0, 0, 0,
        133, 0, 0, 0, 113, 0, 0, 0, 133, 0, 0, 0, 5, 0, 0, 0, 123, 10, 224, 255, 0, 0, 0, 0, 121,
        161, 240, 255, 0, 0, 0, 0, 123, 26, 232, 255, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2,
        0, 0, 248, 255, 255, 255, 191, 163, 0, 0, 0, 0, 0, 0, 7, 3, 0, 0, 224, 255, 255, 255, 24,
        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 183, 4, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 2, 0,
        0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 45, 45, 45, 45, 45, 45, 45, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 71, 80, 76, 0, 131, 15, 5, 0, 8, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 72, 0, 0,
        0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 144, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0,
        159, 235, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 112, 3, 0, 0, 112, 3, 0, 0, 24, 3, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1, 0, 0, 0, 0, 0,
        0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0,
        0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0,
        64, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 30, 0, 0, 0, 2, 0, 0, 4, 16, 0, 0, 0, 35,
        0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 42, 0, 0, 0, 0, 0,
        0, 8, 10, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        2, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 64, 66, 15, 0,
        0, 0, 0, 0, 4, 0, 0, 4, 32, 0, 0, 0, 67, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 5,
        0, 0, 0, 64, 0, 0, 0, 76, 0, 0, 0, 7, 0, 0, 0, 128, 0, 0, 0, 82, 0, 0, 0, 11, 0, 0, 0, 192,
        0, 0, 0, 94, 0, 0, 0, 0, 0, 0, 14, 13, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 16, 0,
        0, 0, 101, 0, 0, 0, 21, 0, 0, 4, 168, 0, 0, 0, 109, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 113,
        0, 0, 0, 17, 0, 0, 0, 64, 0, 0, 0, 117, 0, 0, 0, 17, 0, 0, 0, 128, 0, 0, 0, 121, 0, 0, 0,
        17, 0, 0, 0, 192, 0, 0, 0, 125, 0, 0, 0, 17, 0, 0, 0, 0, 1, 0, 0, 128, 0, 0, 0, 17, 0, 0,
        0, 64, 1, 0, 0, 131, 0, 0, 0, 17, 0, 0, 0, 128, 1, 0, 0, 135, 0, 0, 0, 17, 0, 0, 0, 192, 1,
        0, 0, 139, 0, 0, 0, 17, 0, 0, 0, 0, 2, 0, 0, 142, 0, 0, 0, 17, 0, 0, 0, 64, 2, 0, 0, 145,
        0, 0, 0, 17, 0, 0, 0, 128, 2, 0, 0, 148, 0, 0, 0, 17, 0, 0, 0, 192, 2, 0, 0, 151, 0, 0, 0,
        17, 0, 0, 0, 0, 3, 0, 0, 154, 0, 0, 0, 17, 0, 0, 0, 64, 3, 0, 0, 157, 0, 0, 0, 17, 0, 0, 0,
        128, 3, 0, 0, 160, 0, 0, 0, 17, 0, 0, 0, 192, 3, 0, 0, 39, 0, 0, 0, 17, 0, 0, 0, 0, 4, 0,
        0, 168, 0, 0, 0, 17, 0, 0, 0, 64, 4, 0, 0, 171, 0, 0, 0, 17, 0, 0, 0, 128, 4, 0, 0, 177, 0,
        0, 0, 17, 0, 0, 0, 192, 4, 0, 0, 180, 0, 0, 0, 17, 0, 0, 0, 0, 5, 0, 0, 183, 0, 0, 0, 0, 0,
        0, 1, 8, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 2, 0, 0, 0, 197, 0, 0, 0, 15, 0, 0,
        0, 201, 0, 0, 0, 1, 0, 0, 12, 18, 0, 0, 0, 211, 0, 0, 0, 1, 0, 0, 12, 18, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 10, 22, 0, 0, 0, 221, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 3, 0, 0, 0, 0, 21, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0, 226, 0, 0, 0, 0, 0, 0, 14, 23,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 22, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0,
        0, 244, 0, 0, 0, 0, 0, 0, 14, 25, 0, 0, 0, 1, 0, 0, 0, 253, 0, 0, 0, 0, 0, 0, 8, 28, 0, 0,
        0, 1, 1, 0, 0, 0, 0, 0, 8, 29, 0, 0, 0, 7, 1, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0,
        20, 1, 0, 0, 0, 0, 0, 14, 27, 0, 0, 0, 1, 0, 0, 0, 195, 2, 0, 0, 1, 0, 0, 15, 8, 0, 0, 0,
        24, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 203, 2, 0, 0, 1, 0, 0, 15, 32, 0, 0, 0, 14, 0, 0, 0,
        0, 0, 0, 0, 32, 0, 0, 0, 209, 2, 0, 0, 1, 0, 0, 15, 4, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 4,
        0, 0, 0, 217, 2, 0, 0, 1, 0, 0, 15, 4, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0,
        105, 110, 116, 0, 95, 95, 65, 82, 82, 65, 89, 95, 83, 73, 90, 69, 95, 84, 89, 80, 69, 95,
        95, 0, 108, 111, 110, 103, 0, 112, 97, 105, 114, 0, 118, 97, 108, 0, 105, 112, 0, 95, 95,
        117, 54, 52, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 108, 111, 110, 103, 32, 108,
        111, 110, 103, 0, 116, 121, 112, 101, 0, 107, 101, 121, 0, 118, 97, 108, 117, 101, 0, 109,
        97, 120, 95, 101, 110, 116, 114, 105, 101, 115, 0, 109, 121, 95, 109, 97, 112, 0, 112, 116,
        95, 114, 101, 103, 115, 0, 114, 49, 53, 0, 114, 49, 52, 0, 114, 49, 51, 0, 114, 49, 50, 0,
        98, 112, 0, 98, 120, 0, 114, 49, 49, 0, 114, 49, 48, 0, 114, 57, 0, 114, 56, 0, 97, 120, 0,
        99, 120, 0, 100, 120, 0, 115, 105, 0, 100, 105, 0, 111, 114, 105, 103, 95, 97, 120, 0, 99,
        115, 0, 102, 108, 97, 103, 115, 0, 115, 112, 0, 115, 115, 0, 117, 110, 115, 105, 103, 110,
        101, 100, 32, 108, 111, 110, 103, 0, 99, 116, 120, 0, 98, 112, 102, 95, 112, 114, 111, 103,
        49, 0, 98, 112, 102, 95, 112, 114, 111, 103, 50, 0, 99, 104, 97, 114, 0, 98, 112, 102, 95,
        112, 114, 111, 103, 49, 46, 95, 95, 95, 95, 102, 109, 116, 0, 95, 108, 105, 99, 101, 110,
        115, 101, 0, 117, 51, 50, 0, 95, 95, 117, 51, 50, 0, 117, 110, 115, 105, 103, 110, 101,
        100, 32, 105, 110, 116, 0, 95, 118, 101, 114, 115, 105, 111, 110, 0, 47, 104, 111, 109,
        101, 47, 118, 97, 103, 114, 97, 110, 116, 47, 112, 114, 111, 106, 101, 99, 116, 47, 109,
        121, 95, 112, 114, 111, 106, 101, 99, 116, 47, 82, 117, 115, 116, 47, 109, 121, 45, 108,
        105, 98, 98, 112, 102, 45, 114, 115, 47, 107, 112, 114, 111, 98, 101, 47, 115, 114, 99, 47,
        98, 112, 102, 47, 107, 112, 114, 111, 98, 101, 46, 98, 112, 102, 46, 99, 0, 105, 110, 116,
        32, 98, 112, 102, 95, 112, 114, 111, 103, 49, 40, 115, 116, 114, 117, 99, 116, 32, 112,
        116, 95, 114, 101, 103, 115, 32, 42, 99, 116, 120, 41, 0, 9, 98, 112, 102, 95, 112, 114,
        105, 110, 116, 107, 40, 34, 45, 45, 45, 45, 45, 45, 45, 34, 41, 59, 0, 9, 108, 111, 110,
        103, 32, 112, 116, 114, 32, 61, 32, 80, 84, 95, 82, 69, 71, 83, 95, 80, 65, 82, 77, 50, 40,
        99, 116, 120, 41, 59, 0, 9, 98, 112, 102, 95, 109, 97, 112, 95, 100, 101, 108, 101, 116,
        101, 95, 101, 108, 101, 109, 40, 38, 109, 121, 95, 109, 97, 112, 44, 32, 38, 112, 116, 114,
        41, 59, 0, 9, 114, 101, 116, 117, 114, 110, 32, 48, 59, 0, 9, 108, 111, 110, 103, 32, 112,
        116, 114, 32, 61, 32, 80, 84, 95, 82, 69, 71, 83, 95, 82, 67, 40, 99, 116, 120, 41, 59, 0,
        9, 108, 111, 110, 103, 32, 105, 112, 32, 61, 32, 48, 59, 0, 9, 66, 80, 70, 95, 75, 82, 69,
        84, 80, 82, 79, 66, 69, 95, 82, 69, 65, 68, 95, 82, 69, 84, 95, 73, 80, 40, 105, 112, 44,
        32, 99, 116, 120, 41, 59, 0, 9, 9, 46, 118, 97, 108, 32, 61, 32, 98, 112, 102, 95, 107,
        116, 105, 109, 101, 95, 103, 101, 116, 95, 110, 115, 40, 41, 44, 0, 9, 115, 116, 114, 117,
        99, 116, 32, 112, 97, 105, 114, 32, 118, 32, 61, 32, 123, 0, 9, 9, 46, 105, 112, 32, 61,
        32, 105, 112, 44, 0, 9, 98, 112, 102, 95, 109, 97, 112, 95, 117, 112, 100, 97, 116, 101,
        95, 101, 108, 101, 109, 40, 38, 109, 121, 95, 109, 97, 112, 44, 32, 38, 112, 116, 114, 44,
        32, 38, 118, 44, 32, 66, 80, 70, 95, 65, 78, 89, 41, 59, 0, 48, 58, 49, 51, 0, 48, 58, 49,
        48, 0, 48, 58, 52, 0, 46, 114, 111, 100, 97, 116, 97, 0, 46, 109, 97, 112, 115, 0, 108,
        105, 99, 101, 110, 115, 101, 0, 118, 101, 114, 115, 105, 111, 110, 0, 107, 112, 114, 111,
        98, 101, 47, 107, 109, 101, 109, 95, 99, 97, 99, 104, 101, 95, 102, 114, 101, 101, 0, 107,
        114, 101, 116, 112, 114, 111, 98, 101, 47, 107, 109, 101, 109, 95, 99, 97, 99, 104, 101,
        95, 97, 108, 108, 111, 99, 95, 110, 111, 100, 101, 0, 159, 235, 1, 0, 32, 0, 0, 0, 0, 0, 0,
        0, 36, 0, 0, 0, 36, 0, 0, 0, 84, 1, 0, 0, 120, 1, 0, 0, 68, 0, 0, 0, 8, 0, 0, 0, 225, 2, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 248, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0,
        16, 0, 0, 0, 225, 2, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 29, 1, 0, 0, 108, 1, 0, 0, 0, 248, 0, 0,
        8, 0, 0, 0, 29, 1, 0, 0, 143, 1, 0, 0, 2, 0, 1, 0, 40, 0, 0, 0, 29, 1, 0, 0, 167, 1, 0, 0,
        13, 4, 1, 0, 48, 0, 0, 0, 29, 1, 0, 0, 167, 1, 0, 0, 7, 4, 1, 0, 64, 0, 0, 0, 29, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 29, 1, 0, 0, 199, 1, 0, 0, 2, 12, 1, 0, 96, 0, 0, 0,
        29, 1, 0, 0, 236, 1, 0, 0, 2, 16, 1, 0, 248, 2, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 29, 1, 0, 0,
        247, 1, 0, 0, 13, 40, 1, 0, 8, 0, 0, 0, 29, 1, 0, 0, 247, 1, 0, 0, 7, 40, 1, 0, 24, 0, 0,
        0, 29, 1, 0, 0, 20, 2, 0, 0, 7, 44, 1, 0, 32, 0, 0, 0, 29, 1, 0, 0, 34, 2, 0, 0, 2, 56, 1,
        0, 56, 0, 0, 0, 29, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 29, 1, 0, 0, 34, 2, 0, 0,
        2, 56, 1, 0, 80, 0, 0, 0, 29, 1, 0, 0, 71, 2, 0, 0, 10, 68, 1, 0, 88, 0, 0, 0, 29, 1, 0, 0,
        100, 2, 0, 0, 18, 64, 1, 0, 96, 0, 0, 0, 29, 1, 0, 0, 119, 2, 0, 0, 9, 72, 1, 0, 104, 0, 0,
        0, 29, 1, 0, 0, 100, 2, 0, 0, 18, 64, 1, 0, 120, 0, 0, 0, 29, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 144, 0, 0, 0, 29, 1, 0, 0, 131, 2, 0, 0, 2, 84, 1, 0, 176, 0, 0, 0, 29, 1, 0, 0, 236, 1,
        0, 0, 2, 88, 1, 0, 16, 0, 0, 0, 225, 2, 0, 0, 1, 0, 0, 0, 40, 0, 0, 0, 16, 0, 0, 0, 181, 2,
        0, 0, 0, 0, 0, 0, 248, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 186, 2, 0, 0, 0, 0, 0,
        0, 32, 0, 0, 0, 16, 0, 0, 0, 191, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
        3, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 255,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 9, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 1, 0, 0, 0,
        0, 0, 0, 8, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0,
        0, 0, 0, 0, 0, 17, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72,
        2, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 184, 2, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 120, 3, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 3, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 1, 0, 0,
        0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 3, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94, 0, 0,
        0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 164, 3, 0, 0, 0, 0, 0, 0, 4,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 178, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 3, 0, 0,
        0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0,
        0, 0, 0, 0, 0, 0, 205, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 200, 3, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 8, 0, 0, 0,
        0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 241, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 216, 3, 0, 0, 0, 0, 0, 0, 160, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 10, 0, 0, 0, 0, 0, 0, 220, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
